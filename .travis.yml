# Define environment
os: linux  # The default OS
dist: xenial # Ubuntu 16.04
arch: arm64 # Architecture signifying a containerized version of Linux to boot faster

# Define language
language: shell  # aka, bash on Linux

# Only build PRs against master branch or pushes to master branch
branches:
  only:
    - master

# Export global variables into shell
env:
  global:
    # Setting the version of terraform - https://github.com/hashicorp/terraform/releases
    - tf_version=0.12.19

    # Setting terraform init CLI options - https://www.terraform.io/docs/commands/init.html
    - tf_init_cli_options=" -input=false"

    # Set terraform validation CLI options - https://www.terraform.io/docs/commands/validate.html
    - tf_validation_cli_options=""

    # Set terraform plan CLI options - https://www.terraform.io/docs/commands/plan.html
    - tf_plan_cli_options=" -lock=false -input=false"

    # Set terraform apply CLI options - https://www.terraform.io/docs/commands/apply.html
    - tf_apply_cli_options=" -auto-approve -input=false"

jobs:
  include:
    - stage: terraform plan

      # Terraform Plan: As part of a pull request or kicked off by an API
      if: type IN (pull_request, api)

      install:
        # Download and install terraform before each run
        - wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        - unzip terraform_"$tf_version"_linux_amd64.zip
        - sudo mv terraform /usr/local/bin/
        - rm terraform_"$tf_version"_linux_amd64.zip

      script:
        # Check if terraform fmt correct. If not, fail validation
        - echo "Validating Terraform fmt"
        - terraform fmt -recursive -check

        - echo "Pull request detected, creating change plan"

        # Terraform init, validate, then create change plan. If any fail, fail validation
        - terraform init $tf_init_cli_options
        - terraform validate $tf_validation_cli_options
        - terraform plan $tf_plan_cli_options

    - stage: terraform apply

      # Terraform Apply: Only when pushing direct to master, or when PR merge into master
      if: type IN (push) and branch = master

      install:
        # Download and install terraform before each run
        - wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        - unzip terraform_"$tf_version"_linux_amd64.zip
        - sudo mv terraform /usr/local/bin/
        - rm terraform_"$tf_version"_linux_amd64.zip

      script:
        - echo "Merge detected, executing changes"

        # Terraform init and then apply changes to environment
        - terraform init $tf_init_cli_options
        - terraform apply $tf_apply_cli_options
# Slack Webhook Notification 
notifications:
  slack:
    secure: yP9dSfvJ6kSFVUzD2jlZPxoDHoHO2WOF4zZxm4ZXRVwkBLl/ghWXJlHqCXz1uNbLmig9gZh2NQhGRVHPjxrO7lcrz+x+O78be0zC1vlnxuasFANpWeQr+AojFT7lNG/D6T0D6GDDh2Rsu3VaYzdo6c0+fTXkXWxbwLeaoy2ThyjyYTX/3OynmgEVApFrPqzLMKWOnpwAak4XD4GtKbiJ0p6feSk5ZTvyEaLriKe4hYHijFcXBCfCjK9PbLBczOv9uy0fWug5xFRduIjoIUh18vAeFyS64b9RHib4MuVM8O5kifOWkgREZb4/sBBYfaoG1dSgeljs3IuIPOCdAL6BFED9fyoY9ew44c0qy4+zrAN+AXZfUv42seAlb+x6eNrrqAwRLtxRrO9K2+FM18DxMkKUgCfYxACEhrO1DpTyWT3UcinCRSX1/WJ2dCRcXCFN+eX9pBTDpLFlTWISrMpPaBqnz3+JGJ2R5X5m7VdyyzcJbigBOR7lYSXwwxG2o5TFjBr/vaoqd+2atGb4T75aQjljsVQm0o7nnkcgxLhOgEfzSA/DHjXxg5fWgK1zBF9btgLKUYMMuU8ZZdeRHMakZf5fvOiRflZFeASfRS6Cfwv1CMgGq8PJ+t7/UFv4XGF36vMkkDwEtsGmfq99M8mhzv5n1iJxod6+vv4rnntYcyM=